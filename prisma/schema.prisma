generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// User model
model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    customers     Customer[]
    products      Product[]
}

// Account model (necessary for Next Auth)
model Account {
    id                String    @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Session model (necessary for Next Auth)
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model (necessary for Next Auth)
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Customer model
model Customer {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    description   String?
    image         String?
    user          User        @relation(fields: [id], references: [id], onDelete: Cascade)
    proposals     Proposal[]
}

// Product model
model Product {
    id            String      @id @default(cuid())
    name          String
    description   String?
    price         String
    image         String?
    category      String?
    user          User        @relation(fields: [id], references: [id], onDelete: Cascade)
    proposals     Proposal[]  // One product can be present in multiple proposals
}

// Proposal model
model Proposal {
    id            String      @id @default(cuid())
    description   String?
    price         String
    customer      Customer    @relation(fields: [id], references: [id], onDelete: Cascade)
    products      Product[]   // A proposal can have multiple products
}
